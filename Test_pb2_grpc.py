# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import Test_pb2 as Test__pb2


class TestServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UnaryRequest = channel.unary_unary(
                '/TestService/UnaryRequest',
                request_serializer=Test__pb2.TestRequest.SerializeToString,
                response_deserializer=Test__pb2.TestResponse.FromString,
                )
        self.ServerStreaming = channel.unary_stream(
                '/TestService/ServerStreaming',
                request_serializer=Test__pb2.ServerStreamRequest.SerializeToString,
                response_deserializer=Test__pb2.TestResponse.FromString,
                )
        self.ClientStreaming = channel.stream_unary(
                '/TestService/ClientStreaming',
                request_serializer=Test__pb2.TestRequest.SerializeToString,
                response_deserializer=Test__pb2.ClientStreamResponse.FromString,
                )
        self.BiDirectionalRequest = channel.stream_stream(
                '/TestService/BiDirectionalRequest',
                request_serializer=Test__pb2.TestRequest.SerializeToString,
                response_deserializer=Test__pb2.TestResponse.FromString,
                )
        self.FileUpload = channel.stream_unary(
                '/TestService/FileUpload',
                request_serializer=Test__pb2.FileUploadRequest.SerializeToString,
                response_deserializer=Test__pb2.FileUploadResponse.FromString,
                )
        self.FileUploadTest = channel.unary_unary(
                '/TestService/FileUploadTest',
                request_serializer=Test__pb2.FileUploadRequestStr.SerializeToString,
                response_deserializer=Test__pb2.FileUploadResponse.FromString,
                )


class TestServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def UnaryRequest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ServerStreaming(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClientStreaming(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BiDirectionalRequest(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FileUpload(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FileUploadTest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TestServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UnaryRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.UnaryRequest,
                    request_deserializer=Test__pb2.TestRequest.FromString,
                    response_serializer=Test__pb2.TestResponse.SerializeToString,
            ),
            'ServerStreaming': grpc.unary_stream_rpc_method_handler(
                    servicer.ServerStreaming,
                    request_deserializer=Test__pb2.ServerStreamRequest.FromString,
                    response_serializer=Test__pb2.TestResponse.SerializeToString,
            ),
            'ClientStreaming': grpc.stream_unary_rpc_method_handler(
                    servicer.ClientStreaming,
                    request_deserializer=Test__pb2.TestRequest.FromString,
                    response_serializer=Test__pb2.ClientStreamResponse.SerializeToString,
            ),
            'BiDirectionalRequest': grpc.stream_stream_rpc_method_handler(
                    servicer.BiDirectionalRequest,
                    request_deserializer=Test__pb2.TestRequest.FromString,
                    response_serializer=Test__pb2.TestResponse.SerializeToString,
            ),
            'FileUpload': grpc.stream_unary_rpc_method_handler(
                    servicer.FileUpload,
                    request_deserializer=Test__pb2.FileUploadRequest.FromString,
                    response_serializer=Test__pb2.FileUploadResponse.SerializeToString,
            ),
            'FileUploadTest': grpc.unary_unary_rpc_method_handler(
                    servicer.FileUploadTest,
                    request_deserializer=Test__pb2.FileUploadRequestStr.FromString,
                    response_serializer=Test__pb2.FileUploadResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'TestService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TestService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def UnaryRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TestService/UnaryRequest',
            Test__pb2.TestRequest.SerializeToString,
            Test__pb2.TestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ServerStreaming(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/TestService/ServerStreaming',
            Test__pb2.ServerStreamRequest.SerializeToString,
            Test__pb2.TestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ClientStreaming(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/TestService/ClientStreaming',
            Test__pb2.TestRequest.SerializeToString,
            Test__pb2.ClientStreamResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BiDirectionalRequest(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/TestService/BiDirectionalRequest',
            Test__pb2.TestRequest.SerializeToString,
            Test__pb2.TestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FileUpload(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/TestService/FileUpload',
            Test__pb2.FileUploadRequest.SerializeToString,
            Test__pb2.FileUploadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FileUploadTest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TestService/FileUploadTest',
            Test__pb2.FileUploadRequestStr.SerializeToString,
            Test__pb2.FileUploadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
